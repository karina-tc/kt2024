---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="coordinate-grid">
			<div id="column-coordinates" class="column-coordinates"></div>
			<div id="row-coordinates" class="row-coordinates"></div>
			<div id="grid-lines" class="grid-lines"></div>
		</div>
		<div class="content">
			<slot />
		</div>

		<script>
			function updateCoordinates() {
				const columnCoords = document.getElementById('column-coordinates');
				const rowCoords = document.getElementById('row-coordinates');
				const gridLines = document.getElementById('grid-lines');

				const width = window.innerWidth;
				const height = window.innerHeight;

				// Clear existing coordinates and grid lines
				columnCoords.innerHTML = '';
				rowCoords.innerHTML = '';
				gridLines.innerHTML = '';

				// Generate column coordinates and vertical grid lines
				for (let i = 0; i <= width; i += 200) {
					const span = document.createElement('span');
					span.className = 'coordinate';
					span.textContent = i.toString();
					span.style.left = `${(i / width) * 100}%`;
					columnCoords.appendChild(span);

					const line = document.createElement('div');
					line.className = 'grid-line vertical';
					line.style.left = `${(i / width) * 100}%`;
					gridLines.appendChild(line);
				}

				// Generate row coordinates and horizontal grid lines
				for (let i = 0; i <= height; i += 200) {
					const span = document.createElement('span');
					span.className = 'coordinate';
					span.textContent = numberToLetter(Math.floor(i / 200));
					span.style.top = `${(i / height) * 100}%`;
					rowCoords.appendChild(span);

					const line = document.createElement('div');
					line.className = 'grid-line horizontal';
					line.style.top = `${(i / height) * 100}%`;
					gridLines.appendChild(line);
				}
			}

			function numberToLetter(num) {
				let letter = '';
				while (num >= 0) {
					letter = String.fromCharCode(65 + (num % 26)) + letter;
					num = Math.floor(num / 26) - 1;
				}
				return letter;
			}

			// Initial update
			updateCoordinates();

			// Update on window resize
			window.addEventListener('resize', updateCoordinates);
		</script>
	</body>
</html>
<style is:global>
	:root {
		--base-light: #F9F7F5;
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		@apply bg-[var(--base-light)] text-black;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
	body {
		@apply relative min-h-screen;
	}
	.coordinate-grid {
		@apply absolute top-0 left-0 w-full h-full pointer-events-none;
	}
	.column-coordinates {
		@apply absolute py-4 ml-4 top-2 left-0 w-full flex justify-between px-4 text-xs text-gray-400;
	}
	.row-coordinates {
		@apply pt-32 px-4 absolute top-0 left-2 h-full flex flex-col justify-between py-4 text-xs text-gray-400;
	}
	.coordinate {
		@apply inline-block;
	}
	.content {
		@apply relative z-10;
	}
	.grid-lines {
		@apply absolute top-0 left-0 w-full h-full opacity-50;
	}
	.grid-line {
		@apply absolute border-dotted border-gray-300;
	}
	.grid-line.vertical {
		@apply h-full border-l;
	}
	.grid-line.horizontal {
		@apply w-full border-t;
	}
</style>
