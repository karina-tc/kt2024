---
import Button from '../components/Button.astro';
import * as Icon from '@astropub/icons'
export interface Crumb {
  text: string;
  href: string;
}

interface Props {
  crumbs: Crumb[];
}

const { crumbs } = Astro.props;

// Object to map page keys to display titles
const pageTitles: { [key: string]: string } = {
  'work': 'Work',
  'thoughts': 'Thoughts',
  'about': 'About',
}

// Get the current page title from pageTitles if it exists, otherwise use the last crumb's text
const lastCrumb = crumbs[crumbs.length - 1];
const currentPageTitle = pageTitles[lastCrumb.href.replace('/', '')] || lastCrumb.text;

const updatedCrumbs = crumbs.map((crumb, index) => 
  index === crumbs.length - 1 
    ? { ...crumb, text: currentPageTitle }
    : crumb
);
---

<nav aria-label="Breadcrumb">
  <ol class="breadcrumbs">
    {updatedCrumbs.map((crumb, index) => (
      <li class="flex items-center">
        {index > 0 && <span>&nbsp;/&nbsp;</span>}
        {index === updatedCrumbs.length - 1 ? (
          <div class="relative">
            {Object.keys(pageTitles).includes(lastCrumb.href.replace('/', '')) ? (
              <button id="lastCrumbDropdown" class="dropdown-menu-trigger" data-page-title={crumb.text}>
                {crumb.text}
                <span class="w-4 h-4 ml-1 transition-transform duration-300" id="chevronIcon">
                  <Icon.ChevronDown size="14" />
                </span>
              </button>
            ) : (
              <span class="text-gray-900 font-medium">{crumb.text}</span>
            )}
            <div id="dropdownMenu" class="dropdown-menu hidden">
              <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                {Object.entries(pageTitles).map(([key, value]) => {
                  const shouldRender = key.toLowerCase() !== lastCrumb.text.toLowerCase();
                  return shouldRender && (
                    <a
                      href={`/${key}`}
                      class="dropdown-menu-item"
                      role="menuitem"
                    >
                      {value}
                    </a>
                  );
                })}
              </div>
            </div>
          </div>
        ) : (
        <Button type="textual" additionalClasses="text-gray-900 text-base" href={crumb.href}>{crumb.text}</Button>
        )}
      </li>
    ))}
  </ol>
</nav>

<style>
  .breadcrumbs {
    @apply flex items-center space-x-1 text-lg text-gray-500 font-light;
  }
  .breadcrumbs a {
    @apply text-gray-900 font-medium;
  }
  .divider {
    @apply font-light;
  }
  .dropdown-menu-trigger {
    @apply flex items-center text-base text-gray-900 font-medium;
  }
  .dropdown-menu {
    @apply absolute z-10 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5;
  }
  .dropdown-menu-item {
    @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900;
  }
</style>

<script>
  function updateBreadcrumbs() {
    const dropdown = document.getElementById('lastCrumbDropdown');
    const menu = document.getElementById('dropdownMenu');
    const chevronIcon = document.getElementById('chevronIcon');

    if (dropdown && menu && chevronIcon) {
      dropdown.addEventListener('click', () => {
        menu.classList.toggle('hidden');
        chevronIcon.classList.toggle('rotate-180');
      });

      document.addEventListener('click', (event) => {
        if (!dropdown.contains(event.target as Node)) {
          menu.classList.add('hidden');
          chevronIcon.classList.remove('rotate-180');
        }
      });
    }
  }

  // Run on initial load
  updateBreadcrumbs();

  // Run on view transitions
  document.addEventListener('astro:after-swap', updateBreadcrumbs);
</script>
