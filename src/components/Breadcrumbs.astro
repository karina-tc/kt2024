---
export interface Crumb {
  text: string;
  href: string;
}

interface Props {
  crumbs: Crumb[];
}

const { crumbs } = Astro.props;

// Object to map page keys to display titles
const pageTitles: { [key: string]: string } = {
  'work': 'My Work',
  'thoughts': 'My Thoughts',
  'about': 'About Me',
}

function getLastCrumbText(text: string): string {
  return pageTitles[text.toLowerCase()] || text;
}

const updatedCrumbs = crumbs.map((crumb, index) => 
  index === crumbs.length - 1 
    ? { ...crumb, text: getLastCrumbText(crumb.text) }
    : crumb
);

const lastCrumb = updatedCrumbs[updatedCrumbs.length - 1];

console.log('Last Crumb:', lastCrumb);
console.log('Page Titles:', pageTitles);
---

<nav aria-label="Breadcrumb">
  <ol class="breadcrumbs">
    {updatedCrumbs.map((crumb, index) => (
      <li class="flex items-center">
        {index > 0 && <span>&nbsp;/&nbsp;</span>}
        {index === updatedCrumbs.length - 1 ? (
          <div class="relative">
            <button id="lastCrumbDropdown" class="flex items-center text-gray-900 font-medium">
              {crumb.text}
              <svg class="w-4 h-4 ml-1 transition-transform duration-300" id="chevronIcon" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
            <div id="dropdownMenu" class="hidden absolute z-10 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
              <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                {Object.entries(pageTitles).map(([key, value]) => {
                  const shouldRender = key.toLowerCase() !== lastCrumb.text.toLowerCase();
                  console.log(`Key: ${key}, Value: ${value}, Should Render: ${shouldRender}`);
                  return shouldRender && (
                    <a
                      href={`/${key}`}
                      class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                      role="menuitem"
                    >
                      {value}
                    </a>
                  );
                })}
              </div>
            </div>
          </div>
        ) : (
          <span class="link-block group">
            <a href={crumb.href}>{crumb.text}</a>
            <div class="highlight"></div>
          </span>
        )}
      </li>
    ))}
  </ol>
</nav>

<style>
  .breadcrumbs {
    @apply flex items-center space-x-1 text-lg text-gray-500 font-light;
  }
  .breadcrumbs a {
    @apply text-gray-900 font-medium;
  }
  .divider {
    @apply font-light;
  }
  .link-block {
    @apply flex flex-col gap-[2px] relative;
  }
  .highlight {
    @apply absolute inset-x-0 bottom-0 h-0.5 bg-gray-300 scale-x-0 opacity-0 group-hover:scale-x-100 group-hover:opacity-100 transition-all duration-300;
  }
</style>

<script>
  const dropdown = document.getElementById('lastCrumbDropdown');
  const menu = document.getElementById('dropdownMenu');
  const chevronIcon = document.getElementById('chevronIcon');

  if (dropdown && menu && chevronIcon) {
    dropdown.addEventListener('click', () => {
      menu.classList.toggle('hidden');
      chevronIcon.classList.toggle('rotate-180');
    });

    document.addEventListener('click', (event) => {
      if (!dropdown.contains(event.target as Node)) {
        menu.classList.add('hidden');
        chevronIcon.classList.remove('rotate-180');
      }
    });
  }
</script>
