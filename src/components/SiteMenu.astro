---
import MenuButton from './menu/MenuButton.astro';
import Navigation from './menu/Navigation.astro';
import Colophon from './menu/Colophon.astro';
import Guestbook from './menu/Guestbook.astro';
---

<div class="menu-container" transition:persist="menu">
  <MenuButton />
  <div class="menu-content">
    <Navigation />
    <Colophon />
    <Guestbook />
    <div class="footer-links">
      <p class="mr-auto">© {new Date().getFullYear()} Karina Tovar</p>
      <p class="cursor-pointer hover:text-ink" id="colophon-trigger">Colophon</p>
      <p> · </p>
      <p class="cursor-pointer hover:text-ink" id="backlog-trigger">Guest Book</p>
    </div>
  </div>
</div>

<style>
  .menu-container::after {
    @apply w-0 h-0 bg-white/40 absolute -left-12 -top-12 opacity-0 transition-all -z-10 backdrop-blur;
    content: '';
  }
  
  .menu-container {
    @apply fixed top-0 left-0 m-12 z-[100] w-12 h-12 rounded-3xl bg-transparent overflow-visible transition-all duration-500;
    transform-origin: center;
  }

  .menu-container[aria-expanded="true"] {
    @apply bg-white w-[calc(100vw-80px)] h-[calc(100vh-80px)];
  }

  .menu-container[aria-expanded="true"]::after {
    @apply opacity-100 w-screen h-screen;
  }

  .menu-container[aria-expanded="true"] .menu-content {
    @apply opacity-100 pointer-events-auto;
  }

  .menu-content {
    @apply absolute inset-0 flex flex-col items-center justify-center w-full max-w-md mx-auto mt-10 gap-8 opacity-0 pointer-events-none transition-all duration-300;
  }

  .footer-links {
    @apply w-full flex items-center gap-2 text-sm font-medium text-inkLight justify-center mt-10 pt-10 border-t border-inkLighter/50 z-10;
  }
</style>

<script>
  function setupMenu() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    const links = document.querySelectorAll('.menu-link');

    if (trigger && menuContainer) {
      // Add index to links for staggered animation
      links.forEach((link, index) => {
        (link as HTMLElement).style.setProperty('--index', index.toString());
      });
      
      // Remove existing listener to prevent duplicates
      trigger.removeEventListener('click', handleMenuClick);
      trigger.addEventListener('click', handleMenuClick);

      // Close menu when a link is clicked
      links.forEach(link => {
        link.addEventListener('click', () => {
          trigger.setAttribute('aria-expanded', 'false');
          menuContainer.setAttribute('aria-expanded', 'false');
          resetMenuContent();
        });
      });
    }
  }

  function handleMenuClick() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    
    if (trigger && menuContainer) {
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      trigger.setAttribute('aria-expanded', (!isExpanded).toString());
      menuContainer.setAttribute('aria-expanded', (!isExpanded).toString());

      if (isExpanded) {
        resetMenuContent();
      }
    }
  }

  function resetMenuContent() {
    const linksContent = document.getElementById('links-content');
    const colophonContent = document.getElementById('colophon-content');
    const backlogContent = document.getElementById('backlog-content');
    const linksIllustration = document.getElementById('links-illustration');

    // Hide secondary sections
    [colophonContent, backlogContent].forEach(section => {
      if (section) {
        section.classList.add('opacity-0', 'pointer-events-none');
        section.classList.remove('opacity-100', 'pointer-events-auto');
      }
    });
    
    // Reset illustration state
    if (linksIllustration) {
      linksIllustration.classList.remove('opacity-50', 'opacity-100');
      linksIllustration.classList.add('opacity-0');
    }
    
    // Show main menu with fade
    if (linksContent) {
      linksContent.classList.remove('opacity-0', 'pointer-events-none');
      linksContent.classList.add('opacity-100', 'pointer-events-auto');
    }
  }

  function updateActiveLink() {
    const currentPath = window.location.pathname;
    const links = document.querySelectorAll('.menu-link');
    const hoverIllustration = document.querySelector('#hover-illustration') as HTMLElement;
    
    links.forEach(link => {
      const path = link.getAttribute('data-path');
      if (path === currentPath) {
        link.classList.add('active');
        // Show the active page's image
        const image = link.getAttribute('data-image');
        if (image && hoverIllustration) {
          hoverIllustration.style.backgroundImage = `url('${image}')`;
          hoverIllustration.classList.add('opacity-40');
        }
      } else {
        link.classList.remove('active');
      }
    });
  }

  // Make sure this runs on initial load and after view transitions
  updateActiveLink();
  document.addEventListener('astro:after-swap', updateActiveLink);

  // Run on initial load
  setupMenu();

  // Close menu before page transition starts
  document.addEventListener('astro:before-preparation', () => {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    if (trigger && menuContainer) {
      trigger.setAttribute('aria-expanded', 'false');
      menuContainer.setAttribute('aria-expanded', 'false');
    }
  });

  // Run after view transitions
  document.addEventListener('astro:after-swap', setupMenu);

  function setupContentSwitcher() {
    const linksContent = document.getElementById('links-content');
    const linksIllustration = document.getElementById('links-illustration');
    const colophonContent = document.getElementById('colophon-content');
    const backlogContent = document.getElementById('backlog-content');
    const colophonTrigger = document.getElementById('colophon-trigger');
    const backlogTrigger = document.getElementById('backlog-trigger');
    const backButtons = document.querySelectorAll('.back-to-menu');

    // Restore hover illustration functionality
    const menuLinks = document.querySelectorAll('.menu-link');
    menuLinks.forEach(link => {
      link.addEventListener('mouseenter', () => {
        const image = link.getAttribute('data-image');
        if (image && linksIllustration) {
          linksIllustration.style.backgroundImage = `url('${image}')`;
          linksIllustration.classList.add('opacity-50');
          linksIllustration.classList.remove('opacity-0', 'opacity-100');
        }
      });

      link.addEventListener('mouseleave', () => {
        if (linksIllustration && !link.classList.contains('active')) {
          linksIllustration.classList.remove('opacity-50', 'opacity-100');
          linksIllustration.classList.add('opacity-0');
        }
      });
    });

    function showSection(sectionToShow: HTMLElement) {
      // Keep footer triggers always accessible
      const footerTriggers = document.querySelectorAll('#colophon-trigger, #backlog-trigger');
      footerTriggers.forEach(trigger => {
        if (trigger) trigger.classList.remove('pointer-events-none');
      });

      // Hide all sections with fade
      [linksContent, colophonContent, backlogContent].forEach(section => {
        if (section) {
          section.classList.add('opacity-0', 'pointer-events-none');
          section.classList.remove('opacity-100', 'pointer-events-auto');
        }
      });
      if (linksIllustration) {
        linksIllustration.classList.remove('opacity-50', 'opacity-100');
        linksIllustration.classList.add('opacity-0');
      }

      // Show the selected section with fade
      sectionToShow.classList.remove('opacity-0', 'pointer-events-none');
      sectionToShow.classList.add('opacity-100', 'pointer-events-auto');
    }

    function showMainMenu() {
      // Keep footer triggers always accessible
      const footerTriggers = document.querySelectorAll('#colophon-trigger, #backlog-trigger');
      footerTriggers.forEach(trigger => {
        if (trigger) trigger.classList.remove('pointer-events-none');
      });

      // Hide secondary sections
      [colophonContent, backlogContent].forEach(section => {
        if (section) {
          section.classList.add('opacity-0', 'pointer-events-none');
          section.classList.remove('opacity-100', 'pointer-events-auto');
        }
      });
      
      // Show main menu with fade
      if (linksContent) {
        linksContent.classList.remove('opacity-0', 'pointer-events-none');
        linksContent.classList.add('opacity-100', 'pointer-events-auto');
      }
      if (linksIllustration) {
        linksIllustration.classList.remove('opacity-0', 'opacity-100');
        // Only add opacity-50 if there's an active link
        const activeLink = document.querySelector('.menu-link.active');
        if (activeLink) {
          const image = activeLink.getAttribute('data-image');
          if (image) {
            linksIllustration.style.backgroundImage = `url('${image}')`;
            linksIllustration.classList.add('opacity-50');
          }
        }
      }
    }

    colophonTrigger?.addEventListener('click', () => {
      if (colophonContent) showSection(colophonContent);
    });

    backlogTrigger?.addEventListener('click', () => {
      if (backlogContent) showSection(backlogContent);
    });

    backButtons.forEach(button => {
      button.addEventListener('click', showMainMenu);
    });
  }

  // Run on initial load
  setupContentSwitcher();

  // Run after view transitions
  document.addEventListener('astro:after-swap', setupContentSwitcher);

  function setupKeyboardShortcuts() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    const shortcutText = document.getElementById('shortcutText');
    
    // Detect OS for showing correct shortcut
    const isMac = /Mac|iPhone|iPod|iPad/.test(navigator.userAgent);
    const shortcut = isMac ? '⌘ K' : '⌃ K';
    
    if (shortcutText) {
      shortcutText.textContent = shortcut;
    }

    // Handle keyboard shortcuts
    function handleKeydown(e: KeyboardEvent) {
      // Check for Command+K (Mac) or Control+K (Windows)
      if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {
        e.preventDefault();
        if (trigger && menuContainer) {
          const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
          trigger.setAttribute('aria-expanded', (!isExpanded).toString());
          menuContainer.setAttribute('aria-expanded', (!isExpanded).toString());
          
          if (isExpanded) {
            resetMenuContent();
          }
          
          if (shortcutText) {
            shortcutText.textContent = !isExpanded ? 'ESC' : shortcut;
          }
        }
      }
      
      // Check for Escape key
      if (e.key === 'Escape' && trigger?.getAttribute('aria-expanded') === 'true') {
        if (trigger && menuContainer) {
          trigger.setAttribute('aria-expanded', 'false');
          menuContainer.setAttribute('aria-expanded', 'false');
          resetMenuContent();
          if (shortcutText) {
            shortcutText.textContent = shortcut;
          }
        }
      }
    }

    // Update shortcut text when menu is clicked
    function handleMenuClickWithShortcut() {
      if (trigger && menuContainer) {
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        if (shortcutText) {
          shortcutText.textContent = isExpanded ? 'ESC' : shortcut;
        }
      }
    }

    // Remove existing listeners to prevent duplicates
    document.removeEventListener('keydown', (window as any).handleKeydown);
    trigger?.removeEventListener('click', (window as any).handleMenuClickWithShortcut);

    // Add new listeners
    document.addEventListener('keydown', handleKeydown);
    trigger?.addEventListener('click', handleMenuClickWithShortcut);

    // Store handlers for cleanup
    (window as any).handleKeydown = handleKeydown;
    (window as any).handleMenuClickWithShortcut = handleMenuClickWithShortcut;

    // Initial state check
    if (trigger && shortcutText) {
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      shortcutText.textContent = isExpanded ? 'ESC' : shortcut;
    }
  }

  // Keep all existing initialization calls
  setupMenu();
  updateActiveLink();
  setupContentSwitcher();
  setupKeyboardShortcuts();

  // Keep all existing event listeners
  document.addEventListener('astro:after-swap', updateActiveLink);
  document.addEventListener('astro:after-swap', setupMenu);
  document.addEventListener('astro:after-swap', setupContentSwitcher);
  document.addEventListener('astro:after-swap', setupKeyboardShortcuts);

  document.addEventListener('astro:before-preparation', () => {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    const shortcutText = document.getElementById('shortcutText');
    
    if (trigger && menuContainer) {
      trigger.setAttribute('aria-expanded', 'false');
      menuContainer.setAttribute('aria-expanded', 'false');
      resetMenuContent();
      
      // Reset shortcut text
      const isMac = /Mac|iPhone|iPod|iPad/.test(navigator.userAgent);
      if (shortcutText) {
        shortcutText.textContent = isMac ? '⌘ K' : '⌃ K';
      }
    }
  });

  // Clean up event listeners before view transitions
  document.addEventListener('astro:before-swap', () => {
    const handleKeydown = (window as any).handleKeydown;
    const handleMenuClickWithShortcut = (window as any).handleMenuClickWithShortcut;
    const trigger = document.querySelector('.menu-container button');
    
    if (handleKeydown) {
      document.removeEventListener('keydown', handleKeydown);
    }
    if (handleMenuClickWithShortcut && trigger) {
      trigger.removeEventListener('click', handleMenuClickWithShortcut);
    }
  });

  function setupGuestbookForm() {
    const form = document.getElementById('guestbook-form') as HTMLFormElement;
    const successDiv = document.getElementById('guestbook-success');
    const submitAnotherBtn = document.getElementById('submit-another');
    const introDiv = document.getElementById('guestbook-intro');

    if (!form || !successDiv || !submitAnotherBtn || !introDiv) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      try {
        // Submit the form data to Netlify
        const formData = new FormData(form);
        await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData as any).toString()
        });

        // Hide form and intro
        form.classList.add('hidden');
        introDiv.classList.add('hidden');
        // Show success message
        successDiv.classList.remove('hidden');

      } catch (error) {
        console.error('Error submitting form:', error);
      }
    });

    // Handle "Submit another message" button
    submitAnotherBtn.addEventListener('click', () => {
      form.reset();
      form.classList.remove('hidden');
      introDiv.classList.remove('hidden');
      successDiv.classList.add('hidden');
    });
  }

  // Add to your existing initialization calls
  setupGuestbookForm();
  
  // Add to your existing astro:after-swap listener
  document.addEventListener('astro:after-swap', setupGuestbookForm);
</script>
