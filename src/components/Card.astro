---
interface Props {
  brow_text?: string;
	title: string;
	body: string;
	image?: string;
	alt_text?: string;
  additionalClasses?: string;
}

const { brow_text, title, image, body, alt_text, additionalClasses = '' } = Astro.props;
---

<div class={`card ${additionalClasses}`}>
  {brow_text && <p class="brow-text">{brow_text}</p>}
	<h2 class="text-xl">{title}</h2>
	{image && <img src={image} alt={alt_text} />}
	<div class="flex flex-col">
		<p>{body}</p>
		<slot />
	</div>
</div>
<style>
	.card {
    	@apply flex flex-col h-fit gap-4 p-10 bg-white text-black rounded-tl-2xl rounded-br-2xl rounded-tr-sm rounded-bl-sm min-w-[580px] max-w-[580px] min-h-[580px] shadow-md transition-all duration-300 ease-in-out hover:shadow-lg hover:-translate-y-1;
  	}
    .brow-text {
      @apply text-gray-500 font-medium text-xl;
    }
	.link-card {
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>
