---
import * as Icon from '@astropub/icons'
import ThemeToggle from '../components/ThemeToggle.astro';
import Button from './Button.astro';

interface Props {
  activePage?: string;
  additionalClasses?: string;
}

const { activePage, additionalClasses = '' } = Astro.props;

const navigationItems = [
  { path: '/', label: 'Home', image: '/house.png' },
  { path: '/about', label: 'About', image: '/folder.png' },
  { path: '/work', label: 'Work', image: '/briefcase.png' },
  { path: '/thoughts', label: 'Thoughts', image: '/book.png' },
  { path: '/contact', label: 'Contact', image: '/keyboard.png' },
];
---

<div class="menu-container" transition:persist="menu">
  <button class="trigger" type="button" aria-label="Toggle Menu" aria-expanded="false">
    <div class="menu-icon">
      <span class="menu-open-icon"><Icon.HamburgerMenu size="20" /></span>
      <span class="menu-close-icon"><Icon.Cross2 size="20" /></span>
    </div>
  </button>
  <div class="menu-content">
    <div 
      id="links-illustration"
      class="w-80 h-80 bg-cover rounded-full absolute opacity-0 top-10 transition-all duration-300"
    ></div>
    <nav id="links-content" class="flex flex-col justify-center items-center gap-6 transition-all duration-300">
      {
        navigationItems.map(({ path, label, image }) => (
          <a 
            href={path} 
            class="menu-link group" 
            data-path={path}
            data-image={image}
          >
            <span>{label}</span>
          </a>
        ))
      }
    </nav>
    <div id="colophon-content" class="opacity-0 pointer-events-none absolute inset-0 space-y-5 text-center font-medium transition-all duration-300">
      <Button type="textual-button" additionalClasses="back-to-menu mb-8">← Back to menu</Button>
      <div class="w-72 h-72 mx-auto overflow-hidden shadow-2xl shadow-inkLighter/50 border-10 border-white bg-contain rounded-full bg-[url('/computer.png')]"></div>
      <p>Designed purely in code. Illustrations made via Midjourney. Built with blood sweat and tears—and eventually a bit of Claude's help. Powered by AstroJS and Notion.</p>
      <p class="text-sm text-inkLight">Long live our AI underlords. May we humans prosper.</p>
    </div>
    <div id="backlog-content" class="opacity-0 pointer-events-none absolute inset-0 space-y-5 text-center font-medium transition-all duration-300">
      <Button type="textual-button" additionalClasses="back-to-menu mb-8">← Back to menu</Button>
      <p>A few things on my mind...</p>
      <ul class="backlog-list">
        <li>Add search to entire site.</li>
        <li>Make clouds and images move in the background.</li>
        <li>Add dark mode support.</li>
        <li>Build project for my daughter and I to take and store our daily selfies</li>
      </ul>
    </div>
    <div class="footer-links">
      <p class="mr-auto">© {new Date().getFullYear()} Karina Tovar</p>
      <p class="cursor-pointer hover:text-ink" id="colophon-trigger">Colophon</p>
      <p class="cursor-pointer hover:text-ink" id="backlog-trigger">Backlog</p>
    </div>
  </div>
</div>

<style>
  .menu-container::before {
    @apply w-0 h-0 bg-white/80 absolute -left-12 -top-12 opacity-0 transition-all -z-10;
    content: '';
  }
  .menu-container {
    @apply fixed top-0 left-0 m-12 z-[100] w-12 h-12 rounded-3xl bg-transparent overflow-visible transition-all duration-500;
    transform-origin: center;
  }

  .menu-container[aria-expanded="true"] {
    @apply bg-white w-[calc(100vw-80px)] h-[calc(100vh-80px)];
  }

  .menu-container[aria-expanded="true"]::before {
    @apply opacity-100 w-screen h-screen;
  }

  .trigger {
    @apply w-12 h-12 shadow-xl shadow-inkLighter/50 bg-inkDark text-white rounded-full flex items-center justify-center relative z-[102];
  }

  .menu-container[aria-expanded="true"] .trigger {
    @apply bg-brand text-white shadow-none;
  }

  .menu-icon {
    @apply relative flex items-center justify-center z-[1] cursor-pointer mt-[1px];
  }

  .menu-open-icon {
    @apply transition-all duration-300;
  }

  .menu-close-icon {
    @apply absolute opacity-0 transition-all duration-300;
  }

  .trigger[aria-expanded="true"] .menu-open-icon {
    @apply absolute opacity-0;
  }

  .trigger[aria-expanded="true"] .menu-close-icon {
    @apply relative opacity-100;
  }

  .menu-content  {
    @apply inset-0 flex flex-col items-center justify-center w-full max-w-md mx-auto mt-10 gap-8 opacity-0 pointer-events-none transition-all duration-100;
  }

  .menu-content a {
    @apply w-fit relative;
  }

  .menu-content a span {
    @apply z-10;
  }

  .menu-container[aria-expanded="true"] .menu-content {
    @apply opacity-100 pointer-events-auto relative;
  }

  .menu-link {
    @apply text-7xl text-inkDark font-instrument transition-all duration-300 
    hover:text-ink relative opacity-0 -translate-y-4;
    transition-delay: calc(var(--index) * 100ms);
  }

  .menu-container[aria-expanded="true"] .menu-link {
    @apply opacity-100 translate-y-0;
  }

  .menu-link.active {
    @apply text-brand;
  }

  .menu-link.active::after {
    content: '';
    @apply absolute -bottom-2 left-0 w-full h-0.5 bg-brand;
  }

  .footer-links {
    @apply w-full flex items-center gap-2 text-sm font-medium text-inkLight justify-center mt-10 pt-10 border-t border-inkLighter/50 z-10;
  }

  .backlog-list li {
    @apply flex items-center before:content-['•'] before:mr-2 mb-1;
  }
</style>

<script>
  function setupMenu() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    const links = document.querySelectorAll('.menu-link');

    if (trigger && menuContainer) {
      // Add index to links for staggered animation
      links.forEach((link, index) => {
        (link as HTMLElement).style.setProperty('--index', index.toString());
      });
      
      // Remove existing listener to prevent duplicates
      trigger.removeEventListener('click', handleMenuClick);
      trigger.addEventListener('click', handleMenuClick);

      // Close menu when a link is clicked
      links.forEach(link => {
        link.addEventListener('click', () => {
          trigger.setAttribute('aria-expanded', 'false');
          menuContainer.setAttribute('aria-expanded', 'false');
        });
      });
    }

    const hoverIllustration = document.querySelector('#hover-illustration') as HTMLElement;
    const menuLinks = document.querySelectorAll('.menu-link');

    menuLinks.forEach(link => {
      link.addEventListener('mouseenter', () => {
        const image = link.getAttribute('data-image');
        if (image && hoverIllustration) {
          hoverIllustration.style.backgroundImage = `url('${image}')`;
          hoverIllustration.classList.add('opacity-40');
        }
      });

      link.addEventListener('mouseleave', () => {
        if (hoverIllustration) {
          hoverIllustration.classList.remove('opacity-40');
        }
      });
    });
  }

  function handleMenuClick() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    
    if (trigger && menuContainer) {
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      trigger.setAttribute('aria-expanded', (!isExpanded).toString());
      menuContainer.setAttribute('aria-expanded', (!isExpanded).toString());
    }
  }

  function updateActiveLink() {
    const currentPath = window.location.pathname;
    const links = document.querySelectorAll('.menu-link');
    const hoverIllustration = document.querySelector('#hover-illustration') as HTMLElement;
    
    links.forEach(link => {
      const path = link.getAttribute('data-path');
      if (path === currentPath) {
        link.classList.add('active');
        // Show the active page's image
        const image = link.getAttribute('data-image');
        if (image && hoverIllustration) {
          hoverIllustration.style.backgroundImage = `url('${image}')`;
          hoverIllustration.classList.add('opacity-40');
        }
      } else {
        link.classList.remove('active');
      }
    });
  }

  // Make sure this runs on initial load and after view transitions
  updateActiveLink();
  document.addEventListener('astro:after-swap', updateActiveLink);

  // Run on initial load
  setupMenu();

  // Close menu before page transition starts
  document.addEventListener('astro:before-preparation', () => {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    if (trigger && menuContainer) {
      trigger.setAttribute('aria-expanded', 'false');
      menuContainer.setAttribute('aria-expanded', 'false');
    }
  });

  // Run after view transitions
  document.addEventListener('astro:after-swap', setupMenu);

  function setupContentSwitcher() {
    const linksContent = document.getElementById('links-content');
    const linksIllustration = document.getElementById('links-illustration');
    const colophonContent = document.getElementById('colophon-content');
    const backlogContent = document.getElementById('backlog-content');
    const colophonTrigger = document.getElementById('colophon-trigger');
    const backlogTrigger = document.getElementById('backlog-trigger');
    const backButtons = document.querySelectorAll('.back-to-menu');

    // Restore hover illustration functionality
    const menuLinks = document.querySelectorAll('.menu-link');
    menuLinks.forEach(link => {
      link.addEventListener('mouseenter', () => {
        const image = link.getAttribute('data-image');
        if (image && linksIllustration) {
          linksIllustration.style.backgroundImage = `url('${image}')`;
          linksIllustration.classList.add('opacity-50');
          linksIllustration.classList.remove('opacity-0', 'opacity-100');
        }
      });

      link.addEventListener('mouseleave', () => {
        if (linksIllustration && !link.classList.contains('active')) {
          linksIllustration.classList.remove('opacity-50', 'opacity-100');
          linksIllustration.classList.add('opacity-0');
        }
      });
    });

    function showSection(sectionToShow: HTMLElement) {
      // Keep footer triggers always accessible
      const footerTriggers = document.querySelectorAll('#colophon-trigger, #backlog-trigger');
      footerTriggers.forEach(trigger => {
        if (trigger) trigger.classList.remove('pointer-events-none');
      });

      // Hide all sections with fade
      [linksContent, colophonContent, backlogContent].forEach(section => {
        if (section) {
          section.classList.add('opacity-0', 'pointer-events-none');
          section.classList.remove('opacity-100', 'pointer-events-auto');
        }
      });
      if (linksIllustration) {
        linksIllustration.classList.remove('opacity-50', 'opacity-100');
        linksIllustration.classList.add('opacity-0');
      }

      // Show the selected section with fade
      sectionToShow.classList.remove('opacity-0', 'pointer-events-none');
      sectionToShow.classList.add('opacity-100', 'pointer-events-auto');
    }

    function showMainMenu() {
      // Keep footer triggers always accessible
      const footerTriggers = document.querySelectorAll('#colophon-trigger, #backlog-trigger');
      footerTriggers.forEach(trigger => {
        if (trigger) trigger.classList.remove('pointer-events-none');
      });

      // Hide secondary sections
      [colophonContent, backlogContent].forEach(section => {
        if (section) {
          section.classList.add('opacity-0', 'pointer-events-none');
          section.classList.remove('opacity-100', 'pointer-events-auto');
        }
      });
      
      // Show main menu with fade
      if (linksContent) {
        linksContent.classList.remove('opacity-0', 'pointer-events-none');
        linksContent.classList.add('opacity-100', 'pointer-events-auto');
      }
      if (linksIllustration) {
        linksIllustration.classList.remove('opacity-0', 'opacity-100');
        // Only add opacity-50 if there's an active link
        const activeLink = document.querySelector('.menu-link.active');
        if (activeLink) {
          const image = activeLink.getAttribute('data-image');
          if (image) {
            linksIllustration.style.backgroundImage = `url('${image}')`;
            linksIllustration.classList.add('opacity-50');
          }
        }
      }
    }

    colophonTrigger?.addEventListener('click', () => {
      if (colophonContent) showSection(colophonContent);
    });

    backlogTrigger?.addEventListener('click', () => {
      if (backlogContent) showSection(backlogContent);
    });

    backButtons.forEach(button => {
      button.addEventListener('click', showMainMenu);
    });
  }

  // Run on initial load
  setupContentSwitcher();

  // Run after view transitions
  document.addEventListener('astro:after-swap', setupContentSwitcher);
</script>