---
import * as Icon from '@astropub/icons'
import ThemeToggle from '../components/ThemeToggle.astro';

interface Props {
  activePage?: string;
  additionalClasses?: string;
}

const { activePage, additionalClasses = '' } = Astro.props;
---

<div class="menu-container" transition:persist="menu">
  <button class="trigger" type="button" aria-label="Toggle Menu" aria-expanded="false">
    <div class="menu-icon">
      <span class="menu-open-icon"><Icon.HamburgerMenu size="20" /></span>
      <span class="menu-close-icon"><Icon.Cross2 size="20" /></span>
    </div>
  </button>
  <nav class="menu-content">
    <a href="/" class="menu-link" data-path="/">Home</a>
    <a href="/about" class="menu-link" data-path="/about">About</a>
    <a href="/work" class="menu-link" data-path="/work">Work</a>
    <a href="/thoughts" class="menu-link" data-path="/thoughts">Thoughts</a>
    <a href="/contact" class="menu-link" data-path="/contact">Contact</a>
  </nav>
</div>

<style>
  .menu-container::before {
    @apply w-0 h-0 bg-white/80 absolute -left-12 -top-12 opacity-0 transition-all -z-10;
    content: '';
  }
  .menu-container {
    @apply fixed top-0 left-0 m-12 z-[100] w-12 h-12 rounded-3xl bg-transparent overflow-visible transition-all duration-500;
    transform-origin: center;
  }

  .menu-container[aria-expanded="true"] {
    @apply bg-white w-[calc(100vw-80px)] h-[calc(100vh-80px)];
  }

  .menu-container[aria-expanded="true"]::before {
    @apply opacity-100 w-screen h-screen;
  }

  .trigger {
    @apply w-12 h-12 shadow-xl shadow-inkLighter/50 bg-inkDark text-white rounded-full flex items-center justify-center relative z-[102];
  }

  .menu-container[aria-expanded="true"] .trigger {
    @apply bg-brand text-white shadow-none;
  }

  .menu-icon {
    @apply relative flex items-center justify-center z-[1] cursor-pointer mt-[1px];
  }

  .menu-open-icon {
    @apply transition-all duration-300;
  }

  .menu-close-icon {
    @apply absolute opacity-0 transition-all duration-300;
  }

  .trigger[aria-expanded="true"] .menu-open-icon {
    @apply absolute opacity-0;
  }

  .trigger[aria-expanded="true"] .menu-close-icon {
    @apply relative opacity-100;
  }

  .menu-content {
    @apply fixed inset-0 flex flex-col items-center justify-center gap-8 opacity-0 pointer-events-none transition-all duration-500;
  }

  .menu-container[aria-expanded="true"] .menu-content {
    @apply opacity-100 pointer-events-auto;
  }

  .menu-link {
    @apply text-7xl text-inkDark font-instrument transition-all duration-300 hover:text-ink relative opacity-0 -translate-y-4;
    transition-delay: calc(var(--index) * 100ms);
  }

  .menu-container[aria-expanded="true"] .menu-link {
    @apply opacity-100 translate-y-0;
  }

  .menu-link.active {
    @apply text-brand;
  }

  .menu-link.active::after {
    content: '';
    @apply absolute -bottom-2 left-0 w-full h-0.5 bg-brand;
  }
</style>

<script>
  function setupMenu() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    const links = document.querySelectorAll('.menu-link');

    if (trigger && menuContainer) {
      // Add index to links for staggered animation
      links.forEach((link, index) => {
        (link as HTMLElement).style.setProperty('--index', index.toString());
      });
      
      // Remove existing listener to prevent duplicates
      trigger.removeEventListener('click', handleMenuClick);
      trigger.addEventListener('click', handleMenuClick);

      // Close menu when a link is clicked
      links.forEach(link => {
        link.addEventListener('click', () => {
          trigger.setAttribute('aria-expanded', 'false');
          menuContainer.setAttribute('aria-expanded', 'false');
        });
      });
    }
  }

  function handleMenuClick() {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    
    if (trigger && menuContainer) {
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      trigger.setAttribute('aria-expanded', (!isExpanded).toString());
      menuContainer.setAttribute('aria-expanded', (!isExpanded).toString());
    }
  }

  function updateActiveLink() {
    const currentPath = window.location.pathname;
    const links = document.querySelectorAll('.menu-link');
    
    links.forEach(link => {
      const path = link.getAttribute('data-path');
      if (path === currentPath) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
  }

  // Update active link on initial load
  updateActiveLink();

  // Update active link after view transitions
  document.addEventListener('astro:after-swap', updateActiveLink);

  // Run on initial load
  setupMenu();

  // Close menu before page transition starts
  document.addEventListener('astro:before-preparation', () => {
    const trigger = document.querySelector('.menu-container button') as HTMLButtonElement;
    const menuContainer = document.querySelector('.menu-container') as HTMLElement;
    if (trigger && menuContainer) {
      trigger.setAttribute('aria-expanded', 'false');
      menuContainer.setAttribute('aria-expanded', 'false');
    }
  });

  // Run after view transitions
  document.addEventListener('astro:after-swap', setupMenu);
</script>