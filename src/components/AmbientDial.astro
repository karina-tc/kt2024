<div class="ambient-dial-container">
  <div class="knob" id="knob">
    <div class="indicator"></div>
  </div>
</div>

<style>
.ambient-dial-container {
  @apply fixed left-8 bottom-8 z-50;
  width: 44px;
  height: 44px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(4px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.knob {
  position: absolute;
  inset: 2px;
  border-radius: 50%;
  background: white;
  cursor: pointer;
  transform: rotate(0deg);
  transition: transform 0.1s ease-out;
  box-shadow: 
    0 2px 4px rgba(0, 0, 0, 0.05),
    inset 0 -1px 2px rgba(0, 0, 0, 0.05);
}

.indicator {
  position: absolute;
  top: 15%;
  left: 50%;
  width: 2px;
  height: 8px;
  background: #ff5a5a;
  transform: translateX(-50%);
  border-radius: 1px;
}
</style>

<script>
function initKnob() {
  const knob = document.getElementById('knob');
  if (!knob) return;

  let isDragging = false;
  let startAngle = 0;
  let currentRotation = 0;
  const STEPS = 4; // 4 themes: dawn, noon, dusk, night
  const DEGREES_PER_STEP = 360 / STEPS;
  const SNAP_THRESHOLD = 15;

  function snapToStep(rotation: number): number {
    const normalizedRotation = ((rotation + 180) % 360 + 360) % 360;
    const step = Math.round(normalizedRotation / DEGREES_PER_STEP);
    const snappedRotation = step * DEGREES_PER_STEP - 180;
    return snappedRotation;
  }

  function handleMouseDown(e: MouseEvent) {
    if (!knob) return;
    isDragging = true;
    const knobRect = knob.getBoundingClientRect();
    const knobCenter = {
      x: knobRect.left + knobRect.width / 2,
      y: knobRect.top + knobRect.height / 2
    };
    startAngle = Math.atan2(e.clientY - knobCenter.y, e.clientX - knobCenter.x);
    currentRotation = parseFloat(knob.style.transform.replace('rotate(', '').replace('deg)', '')) || 0;
  }

  function handleMouseMove(e: MouseEvent) {
    if (!isDragging || !knob) return;

    const knobRect = knob.getBoundingClientRect();
    const knobCenter = {
      x: knobRect.left + knobRect.width / 2,
      y: knobRect.top + knobRect.height / 2
    };

    const currentAngle = Math.atan2(e.clientY - knobCenter.y, e.clientX - knobCenter.x);
    let angleDelta = (currentAngle - startAngle) * (180 / Math.PI);
    let newRotation = currentRotation + angleDelta;
    
    // Snap to nearest step if close
    const snappedRotation = snapToStep(newRotation);
    if (Math.abs(newRotation - snappedRotation) < SNAP_THRESHOLD) {
      newRotation = snappedRotation;
    }
    
    knob.style.transform = `rotate(${newRotation}deg)`;
    updateGradients(newRotation);
  }

  function handleMouseUp() {
    if (!isDragging || !knob) return;
    isDragging = false;
    
    const rotation = parseFloat(knob.style.transform.replace('rotate(', '').replace('deg)', '')) || 0;
    const targetRotation = snapToStep(rotation);
    
    knob.style.transform = `rotate(${targetRotation}deg)`;
    updateGradients(targetRotation);
    currentRotation = targetRotation;
  }

  knob.addEventListener('mousedown', handleMouseDown);
  document.addEventListener('mousemove', handleMouseMove);
  document.addEventListener('mouseup', handleMouseUp);

  // Initialize with default position
  updateGradients(0);
}

document.addEventListener('astro:page-load', initKnob);
document.addEventListener('DOMContentLoaded', initKnob);

function updateGradients(newRotation: number) {
throw new Error("Function not implemented.");
}
</script>