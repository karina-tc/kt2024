---
---
<div class="ambient-dial-container">
  <div class="knob-surround">
    <div class="tick-marks"></div>
    <div class="knob" id="knob">
      <div class="knob-center"></div>
      <div class="indicator"></div>
    </div>
  </div>
</div>

<style>
.ambient-dial-container {
  @apply fixed left-8 top-[95%] -translate-y-1/2 z-50;
  width: 80px;
  height: 80px;
}

.knob-surround {
  position: relative;
  width: 80px;
  height: 80px;
  border-radius: 50%;
  border: 2px solid rgba(255, 255, 255, 0.1);
  background: rgba(240, 240, 240, 0.05);
  backdrop-filter: blur(4px);
}

.tick-marks {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  pointer-events: none;
}

.tick-marks::before {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: conic-gradient(
    from 0deg,
    transparent 0deg,
    transparent 6deg,
    rgba(255, 255, 255, 0.2) 6deg,
    rgba(255, 255, 255, 0.2) 7deg,
    transparent 7deg
  );
  background-size: 15deg 15deg;
}

.knob {
  position: absolute;
  top: 4px;
  left: 4px;
  width: calc(100% - 8px);
  height: calc(100% - 8px);
  border-radius: 50%;
  background: linear-gradient(135deg, #ffffff 0%, #f0f0f0 100%);
  box-shadow: 
    2px 2px 4px rgba(0, 0, 0, 0.2),
    inset -2px -2px 4px rgba(0, 0, 0, 0.1),
    inset 2px 2px 4px rgba(255, 255, 255, 0.8);
  cursor: pointer;
  transform: rotate(0deg);
  transition: transform 0.1s ease-out;
}

.knob-center {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: rgba(0, 0, 0, 0.1);
  transform: translate(-50%, -50%);
}

.indicator {
  position: absolute;
  top: 10%;
  left: 50%;
  width: 2px;
  height: 8px;
  background: #ff5a5a;
  transform: translateX(-50%);
  border-radius: 1px;
}
</style>

<script>
const timeOfDayColors = {
  dawn: {
    gradient1: { color: 'rgba(255, 198, 112, 0.4)', position: '30% 30%' },
    gradient2: { color: 'rgba(255, 170, 89, 0.35)', position: '70% 60%' },
    gradient3: { color: 'rgba(230, 138, 174, 0.35)', position: '50% 20%' },
    gradient4: { color: 'rgba(158, 193, 207, 0.35)', position: '20% 80%' }
  },
  noon: {
    gradient1: { color: 'rgba(135, 206, 235, 0.4)', position: '30% 30%' },
    gradient2: { color: 'rgba(255, 255, 255, 0.35)', position: '70% 60%' },
    gradient3: { color: 'rgba(173, 216, 230, 0.35)', position: '50% 20%' },
    gradient4: { color: 'rgba(135, 206, 235, 0.35)', position: '20% 80%' }
  },
  dusk: {
    gradient1: { color: 'rgba(255, 111, 97, 0.4)', position: '30% 30%' },
    gradient2: { color: 'rgba(255, 170, 89, 0.35)', position: '70% 60%' },
    gradient3: { color: 'rgba(230, 138, 174, 0.35)', position: '50% 20%' },
    gradient4: { color: 'rgba(158, 193, 207, 0.35)', position: '20% 80%' }
  },
  night: {
    gradient1: { color: 'rgba(25, 25, 112, 0.4)', position: '30% 30%' },
    gradient2: { color: 'rgba(65, 105, 225, 0.35)', position: '70% 60%' },
    gradient3: { color: 'rgba(138, 43, 226, 0.35)', position: '50% 20%' },
    gradient4: { color: 'rgba(72, 61, 139, 0.35)', position: '20% 80%' }
  }
};

function initKnob() {
  const knob = document.getElementById('knob');
  if (!knob) return;

  let isDragging = false;
  let startAngle = 0;
  let currentRotation = 0;

  function updateGradients(rotation: number) {
    // Convert rotation (0-360) to percentage (0-100)
    const percentage = (rotation + 180) % 360 / 360 * 100;
    
    const gradients = document.querySelectorAll('.gradient-layer');
    if (!gradients.length) return;
    
    let colors;
    if (percentage < 25) {
      colors = timeOfDayColors.dawn;
    } else if (percentage < 50) {
      colors = timeOfDayColors.noon;
    } else if (percentage < 75) {
      colors = timeOfDayColors.dusk;
    } else {
      colors = timeOfDayColors.night;
    }

    gradients.forEach((gradient, index) => {
      const gradientKey = `gradient${index + 1}` as keyof typeof colors;
      const gradientElement = gradient as HTMLElement;
      const colorConfig = colors[gradientKey];
      
      gradientElement.style.background = `radial-gradient(
        circle at ${colorConfig.position},
        ${colorConfig.color} 0%,
        ${colorConfig.color.replace(/, [0-9.]+\)/, ', 0.2)')} 40%,
        transparent 60%
      )`;
    });
  }

  function handleMouseDown(e: MouseEvent) {
    isDragging = true;
    // Add null check since knob could be null
    if (!knob) return;
    const knobRect = knob.getBoundingClientRect();
    const knobCenter = {
      x: knobRect.left + knobRect.width / 2,
      y: knobRect.top + knobRect.height / 2
    };
    startAngle = Math.atan2(e.clientY - knobCenter.y, e.clientX - knobCenter.x);
  }

  function handleMouseMove(e: MouseEvent) {
    if (!isDragging || !knob) return;

    const knobRect = knob.getBoundingClientRect();
    const knobCenter = {
      x: knobRect.left + knobRect.width / 2,
      y: knobRect.top + knobRect.height / 2
    };

    const currentAngle = Math.atan2(e.clientY - knobCenter.y, e.clientX - knobCenter.x);
    let rotation = currentRotation + (currentAngle - startAngle) * (180 / Math.PI);
    
    // Constrain rotation to -180 to 180 degrees
    rotation = Math.max(-180, Math.min(180, rotation));
    
    knob.style.transform = `rotate(${rotation}deg)`;
    updateGradients(rotation);
  }

  function handleMouseUp() {
    if (!isDragging || !knob) return;
    isDragging = false;
    currentRotation = parseFloat(knob.style.transform.replace('rotate(', '').replace('deg)', '')) || 0;
  }

  if (knob) {
    knob.addEventListener('mousedown', handleMouseDown);
    document.addEventListener('mousemove', handleMouseMove);
  }
  document.addEventListener('mouseup', handleMouseUp);

  // Initialize with default position
  updateGradients(0);
}

// Run on initial load and after page transitions
document.addEventListener('astro:page-load', initKnob);
</script>
