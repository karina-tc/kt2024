---
import TwoColumnLayout from '../layouts/TwoColumnLayout.astro';
import Row from '../components/Row.astro';
import { thoughts } from '../data/thoughts';

const breadcrumbs = [
  { text: 'Karina Tovar', href: '/' },
  { text: 'My Thoughts', href: '/thoughts' },
];

const allCategories = [...new Set(thoughts.flatMap(thought => thought.categories))];

// Get the initial category from the URL parameter
const initialCategory = Astro.url.searchParams.get('category') || 'all';
---

<TwoColumnLayout
  layout_body_classes="bg-[url('/hero.png')] bg-cover"
  title="Karina Tovar - Product Designer"
  breadcrumbs={breadcrumbs}
  additionalClasses="[&>.right-column]:h-full"
  asideTitle={{
    line1: "Product Designer",
    line2: "Pixel Philosopher"
  }}
  subtitle="USA Based Â· Listening to Music"
>
  <div slot="left-column-extra" class="categories-list">
    <ul class="flex flex-wrap gap-2">
      <li class={`category-button ${initialCategory === 'all' ? 'active' : ''} bg-gray-200 rounded-full px-3 py-1 text-sm cursor-pointer`} data-category="all">All</li>
      {allCategories.map(category => (
        <li class={`category-button ${initialCategory === category ? 'active' : ''} bg-gray-200 rounded-full px-3 py-1 text-sm cursor-pointer`} data-category={category}>{category}</li>
      ))}
    </ul>
  </div>

  <section id="thoughts-container" class="w-full max-h-[80vh] max-w-[640px] overflow-y-auto flex flex-col gap-3 justify-start pr-10">
    {thoughts.map(thought => (
      <Row
        title={thought.title}
        date={thought.date}
        categories={thought.categories}
        href={thought.href}
      />
    ))}
  </section>
</TwoColumnLayout>

<script>
  let activeCategory = 'all';

  function setupDimming() {
    const rows = document.querySelectorAll('[data-row]');
    
    rows.forEach(row => {
      let hoverTimer: ReturnType<typeof setTimeout>;

      row.addEventListener('mouseenter', () => {
        clearTimeout(hoverTimer);
        hoverTimer = setTimeout(() => {
          rows.forEach(otherRow => {
            if (otherRow !== row) {
              otherRow.classList.add('opacity-50');
            }
          });
        }, 200);
      });

      row.addEventListener('mouseleave', () => {
        clearTimeout(hoverTimer);
        rows.forEach(otherRow => {
          otherRow.classList.remove('opacity-50');
        });
      });
    });
  }

  function updateActiveCategory() {
    const buttons = document.querySelectorAll('.category-button');
    const rows = document.querySelectorAll('[data-row]');

    // Get the initial category from the URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    activeCategory = urlParams.get('category') || 'all';

    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        if (category) {
          activeCategory = category;
          updateUI();
          updateURL(category);
        }
      });
    });

    function updateUI() {
      buttons.forEach(button => {
        button.classList.toggle('active', button.getAttribute('data-category') === activeCategory);
      });

      rows.forEach(row => {
        const rowCategories = row.getAttribute('data-categories')?.split(',') || [];
        if (row instanceof HTMLElement) {
          row.style.display = (activeCategory === 'all' || rowCategories.includes(activeCategory)) ? 'flex' : 'none';
        }
      });
    }

    function updateURL(category: string) {
      const url = new URL(window.location.href);
      if (category === 'all') {
        url.searchParams.delete('category');
      } else {
        url.searchParams.set('category', category);
      }
      history.pushState({}, '', url);
    }

    // Initial UI update
    updateUI();
  }

  // Run on initial load
  document.addEventListener('DOMContentLoaded', () => {
    updateActiveCategory();
    setupDimming();
  });

  // Run on view transitions
  document.addEventListener('astro:after-swap', () => {
    updateActiveCategory();
    setupDimming();
  });
</script>

<style>
  .categories-list {
    @apply mt-10 max-w-80;
  }
  [data-row] {
    transition: all 0.3s ease-in-out;
  }
  .category-button {
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
  }
  .category-button.active {
    @apply bg-red-500 text-white;
  }
  .hide-scrollbar {
    @apply overflow-auto;
  }
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .hide-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
</style>
